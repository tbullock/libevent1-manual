.\" Copyright (c) 2023 Ted Bullock <tbullock@comlore.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.Dd $Mdocdate: January 16 2023 $
.Dt EVENT_REINIT 3
.Os
.Sh NAME
.Nm event_reinit
.Nd Reinitialize the event library after a fork
.Sh SYNOPSIS
.In event.h
.Ft int
.Fn event_reinit "struct event_base *base"
.Sh DESCRIPTION
The function
.Fn event_reinit
is used to reinitialize the
.Lb libevent .
This is typically used after a
.Xr fork 2
call in the child process.
.Pp
The
.Fn event_reinit
function takes a single argument, which is a pointer to the
.Vt event_base
structure that was previously initialized with
.Xr event_init 3 .
The function reinitializes the internal state of the event library,
including the event notification mechanism and the event queue.
.Pp
If the function cannot initialize the kernel notification method, typically
.Xr kqueue 2 ,
.Xr poll 2
or
.Xr select 2
it will use the log callback to post the error and call
.Xr exit 3
to terminate the child process with return value of 1.
.Sh RETURN VALUES
The function
.Fn event_reinit
returns 0 on success and -1 when it is unable to reinitialize any scheduled
events registered to the
.Vt event_base .
.Sh EXAMPLES
This example program demonstrates how to use the
.Fn event_reinit
function from the libevent library to reinitialize the event library after a
fork. It also shows one way to handle errors and customize the way log
messages are handled.
.Bd -literal
#include <event.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

void log_cb(int sev, const char *msg)
{
    printf("[EVENT LOG] %s(%d)\\n", msg, sev);
}

int main()
{
	event_set_log_callback(log_cb);
	struct event_base *base = event_init();
	pid_t pid = fork();
	if (pid == 0) {
		/* Child process */
		if (event_reinit(base) == -1) {
			printf("Child: failed to reinitialize events\\n");
			return 1;
		}
		printf("libevent reinitialized in child process.\\n");
	} else {
		/* Parent process */
		int status;
		wait(&status);
		if(WIFEXITED(status) && WEXITSTATUS(status) == 1) {
			printf("Parent: got fatal error from child\\n");
			return 1;
		}
		printf("libevent initialized in parent process.\\n");
	}
	event_base_free(base);
	return 0;
}
.Ed
.Sh SEE ALSO
.Xr event_init 3 ,
.Xr event_set_log_callback 3 ,
.Xr fork 2
.Sh HISTORY
The first version of the
.Lb libevent
to include
.Fn event_reinit
was version 1.4.1-beta which was released on December 21, 2007.
.Sh AUTHORS
The
.Lb libevent
was written by
.An -nosplit
.An Niels Provos
and
.An Nick Mathewson
.Pp
This manual was written by
.An Ted Bullock Aq Mt tbullock@comlore.com
