.\" $OpenBSD$
.\" Copyright (c) 2023 Ted Bullock <tbullock@comlore.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt EVENT_BASE_LOOP 3
.Os
.Sh NAME
.Nm event_base_loop ,
.Nm event_loop ,
.Nm event_base_dispatch ,
.Nm event_dispatch
.Nd start an event loop
.Sh SYNOPSIS
.In event.h
.Ft int
.Fn event_base_loop "struct event_base *base" "int flags"
.Ft int
.Fn event_loop "int flags"
.Ft int
.Fn event_base_dispatch "struct event_base *base"
.Ft int
.Fn event_dispatch void
.Ft int
.Fo "(*event_sigcb)"
.Fa void
.Fc
.Ft volatile sig_atomic_t
.Fa event_gotsig
.Sh DESCRIPTION
The event library offers a set of
.Em event loop
functions that are based on
.Fn event_base_loop .
These functions replace the main loop of a program and wait for events to
occur before executing corresponding callback functions.
By default, the event loop returns when there are no more events to monitor.
.Pp
There are three types of events these functions will monitor including signal,
kernel and timer.
POSIX signals are configured using
.Xr signal_set 3 .
Kernel events such as network activity and changes to file descriptors are
configured with
.Xr event_set 3 .
Timer events are configured with
.Xr evtimer_set 3 .
.Pp
The function
.Fn event_base_loop
takes two arguments:
.Pp
.Bl -tag -width Ds
.It Va base :
A pointer to an
.Vt event_base
structure initialized by
.Xr event_base_new 3 .
The behavior is undefined if
.Va base
is
.Dv NULL .
.It Va flags :
A set of flags that modify the behavior of the event loop.
The following flags are available on
.Ox :
.Pp
.Bl -hyphen -compact -width 1n
.It
.Dv EVLOOP_ONCE :
Run the event loop for only one iteration and then return.
This is useful for integrating into an existing main program loop that needs
to perform other actions before continuing.
.It
.Dv EVLOOP_NONBLOCK :
Run the event loop in non-blocking mode.
In this mode, the function will return after processing signal and active
kernel events but will
.Em not
wait for timer events to expire.
.El
.El
.Pp
The function
.Fn event_loop
is a version of
.Fn event_base_loop
that requires the simplified API to be initialized by
.Xr event_init 3 .
The function has one argument,
.Va flags ,
with the same attributes as
.Fn event_base_loop .
.Pp
An equivalent to
.Fn event_base_loop
is the older API
.Fn event_base_dispatch
that does not support flags to modify its behavior.
This function is equivalent to calling
.Fn event_base_loop base 0 .
Likewise, the function
.Fn event_dispatch
is equivalent to
.Fn event_loop 0 .
.Pp
New programs expecting to handle signals should use
.Xr signal_set 3 .
However, the event loop functions support an older event library mechanic for
interacting with POSIX signals using standard
.Xr signal 3
handlers.
Programs using this interface need to define two global variables:
.Pp
.Dl Vt extern int (*event_sigcb)(void) ;
.Dl Vt extern volatile sig_atomic_t event_gotsig ;
.Pp
The event loop is notified that a signal was received when a signal handler
sets the
.Va event_gotsig
flag to 1.
To handle signals, a callback function must be defined to manage all expected
signal types.
After calling
.Xr event_init 3
or
.Xr event_base_new 3 ,
the callback function should be assigned to
.Va event_sigcb
before executing the event loop.
The event loop will call the assigned function to process received signals.
If the function returns \-1, the event loop will terminate immediately and set
.Va errno
to
.Er EINTR .
Any other return values will be ignored.
.Sh RETURN VALUES
The event loop functions return:
.Pp
.Bl -tag -compact -offset 3n -width 3n
.It \-1
on error or terminated by
.Va event_sigcb
signal manager,
.Va errno
will be set.
.It 0
on success, asked to terminate loop.
.It 1
on success, no remaining events left or scheduled in queue.
.El
.Sh DIAGNOSTICS
The event library relies on its own system to issue messages via
.Xr event_set_log_callback 3 .
.Pp
.Sy Debug
messages that the
.Fn event_base_loop
event loop functions can report and what they mean:
.Pp
.Bl -tag -width Ds
.It Dq event_base_loop: asked to terminate loop.
Function returned because program logic instructed it to.
This corresponds to return value 0.
.It Dq event_base_loop: no events registered.
No events were registered or all events have been cleared.
This corresponds to return value 1.
.El
.Pp
.Em NOTE
that internally, the event library generates debug messages throughout its
callgraph, especially in the event loop.
Warnings from failed system calls will reflect the kernel notification method
and report
.Va errno
values in their message text.
.Sh ERRORS
These functions have complex interactions with
.Va errno .
The
.Fn event_base_loop
family of functions sets
.Va errno
corresponding to the kernel notification method the event library is
using.
These values will directly correspond to
.Xr kevent 2 ,
.Xr poll 2
or
.Xr select 2
system calls; on
.Ox
this defaults to
.Xr kevent 2 .
See
.Xr event_base_new 3
for details on selecting kernel notification methods.
.Bl -tag -width Er
.It Bq Er EINTR
The
.Fn event_base_loop
and related functions will
.Em only
set
.Va errno
to
.Er EINTR
if the legacy signal management callback function assigned to
.Va event_sigcb
returns \-1.
.Pp
The functions have built-in support for kernel notification methods returning
an error to the event loop and setting
.Va errno
to
.Er EINTR .
The event library will
.Em not
treat this as an error and will return control to the event loop to wait for
the next iteration.
.El
.Sh SEE ALSO
.Xr kevent 2 ,
.Xr poll 2 ,
.Xr select 2 ,
.Xr event_base_new 3
.Sh HISTORY
This manual is for libevent-1.4, with local changes for
.Ox .
.Pp
.Bl -bullet -width Ds
.It
.Fn event_dispatch
was first introduced in libevent-0.1, and added to
.Ox 3.2 .
.It
.Fn event_loop
was introduced in libevent-0.4, and added to
.Ox 3.2 .
.It
.Fn event_base_dispatch
and
.Fn event_base_loop
were added in libevent-1.0, and appeared in
.Ox 3.8 .
.It
Signal handling using
.Va event_gotsig
and
.Va event_sigcb
was added in libevent-0.3c, and appeared in
.Ox 3.2 .
However, this feature was removed in upstream versions of the library starting
from version 2.0.2-alpha.
.El
.Sh AUTHORS
The event library
was written by
.An -nosplit
.An Niels Provos
and
.An Nick Mathewson .
.Pp
This manual page was written by
.An Ted Bullock Aq Mt tbullock@comlore.com .
.Sh CAVEATS
Signal handling using
.Va event_gotsig
and
.Va event_sigcb
is not thread safe.
