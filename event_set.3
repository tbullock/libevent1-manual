.\" $OpenBSD$
.\" Copyright (c) 2023 Ted Bullock <tbullock@comore.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt EVENT_SET 3
.Os
.Sh NAME
.Nm event_set ,
.Nm evtimer_set ,
.Nm signal_set ,
.Nm event_base_set ,
.Nm event_add ,
.Nm evtimer_add ,
.Nm signal_add ,
.Nm event_del ,
.Nm evtimer_del ,
.Nm signal_del ,
.Nm event_base_once ,
.Nm event_once
.Nd configure an event
.Sh SYNOPSIS
.In event.h
.Ft void
.Fo event_set
.Fa "struct event *ev"
.Fa "int fd"
.Fa "short events"
.Fa "void (*fn)(int, short, void *)"
.Fa "void *arg"
.Fc
.Fd #define evtimer_set(ev, fn, arg)
.Fd #define signal_set(ev, signal, fn, arg)
.Ft int
.Fn event_base_set "struct event_base *base" "struct event *ev"
.Ft int
.Fn event_add "struct event *ev" "const struct timeval *tv"
.Fd #define evtimer_add(ev, tv)
.Fd #define signal_add(ev, tv)
.Ft int
.Fn event_del "struct event *ev"
.Fd #define evtimer_del(ev)
.Fd #define signal_del(ev)
.Ft int
.Fo event_base_once
.Fa "struct event_base *base"
.Fa "int fd"
.Fa "short events"
.Fa "void (*fn)(int, short, void *)"
.Fa "void *arg"
.Fa "const struct timeval *tv"
.Fc
.Ft int
.Fo event_once
.Fa "int fd"
.Fa "short events"
.Fa "void (*fn)(int, short, void *)"
.Fa "void *arg"
.Fa "const struct timeval *tv"
.Fc
.Fd #define EV_TIMEOUT	0x01
.Fd #define EV_READ	0x02
.Fd #define EV_WRITE	0x04
.Fd #define EV_SIGNAL	0x08
.Fd #define EV_PERSIST	0x10
.Sh DESCRIPTION
An event loop waits for and dispatches events or messages in a program.
This programming construct enables asynchronous programming, allowing a
program to perform other tasks while waiting for an event to occur.
Asynchronous programming is useful for handling multiple I/O operations, such
as network connections, user interfaces, or disk operations, without blocking
the program.
The event loop continuously processes events and executes callbacks associated
with each event.
.Pp
The
.Fn event_set
function prepares an
.Vt event
structure to monitor a file descriptor or signal for use with an event loop.
Once prepared, the
.Va event
structure can be scheduled with an event loop using
.Fn event_add
to monitor for changes or set a timeout after which a user-defined callback
function will be executed.
Refer to
.Xr event_base_loop 3
for documentation on running an event loop.
.Pp
Arguments for
.Fn event_set
are as follows:
.Bl -tag -width 7n
.It Va ev :
A pointer to a
.Vt "struct event" .
If
.Va ev
is
.Dv NULL
the behavior is undefined.
.It Va fd :
The file descriptor or signal to monitor.
If this is an unassociated timeout event, set this to \-1.
.It Va events :
Flags indicating how to monitor events.
If this is an unassociated timeout event, set this to 0.
.Pp
.Bl -tag -width "EV_PERSIST:" -compact
.It Dv EV_READ :
Triggered when data is available for reading from the file descriptor.
.It Dv EV_WRITE :
Triggered when the file descriptor is ready for writing.
Can be combined with
.Dv EV_READ
to indicate that the program can read from or write to the file descriptor
without blocking.
.It Dv EV_SIGNAL :
Refers to a signal event that is triggered when a specified signal is
received.
Cannot be used together with either
.Dv EV_READ
or
.Dv EV_WRITE .
.It Dv EV_PERSIST :
Indicates that the event should persist after it triggers.
That is, it should remain active until it is explicitly removed by calling
.Fn event_del .
This flag is typically combined with signal events.
.El
.It Va fn :
A user-defined callback function that is executed when the event triggers.
.Pp
.Bl -enum -width Ds -compact
.It
The first parameter is an integer representing the file descriptor or signal
being monitored.
.It
The second parameter is the bitmap corresponding to the type of event,
matching to EV_TIMEOUT, EV_READ, EV_WRITE, EV_SIGNAL and EV_PERSIST.
.It
The third parameter corresponds to the user-defined data structure
passed as a
.Vt void * .
.El
.It Va arg :
User-defined data structure to pass to the callback function.
.El
.Pp
There are several helper macros that make it easier to set up timeout and
signal events in the library.
The helper macros share a distinct naming convention.
For example, the macros
.Fn evtimer_set
and
.Fn signal_set
are named consistently with the library function
.Fn event_set .
The following macro and function calls are equivalent:
.Bd -literal -offset indent
evtimer_set(ev, fn, arg);
event_set(ev, \-1, 0, fn, arg);
.Ed
.Pp
Likewise, configuring a signal event with
.Fn signal_set
has an equivalent call to
.Fn event_set :
.Bd -literal -offset indent
signal_set(ev, signal, fn, arg);
event_set(ev, signal, EV_SIGNAL|EV_PERSIST, fn, arg);
.Ed
.Pp
.Fn event_set
configures new events assuming that the library was initialized by
.Xr event_init 3 .
If a program needs to assign an event to a specific
.Vt event_base
structure, it should call
.Fn event_base_set
after calling
.Fn event_set .
The first argument of
.Fn event_base_set
is the target
.Vt event_base
structure, and the second argument is the
.Vt event
to be reassigned.
The behavior is undefined if either argument is
.Dv NULL .
Only events that have not been processed with
.Fn event_add
or equivalent functions can be assigned to a new
.Vt event_base
structure.
.Pp
.Fn event_add
schedules events with an event loop using the appropriate kernel notification
method
(See
.Fn event_base_new
for an explanation about kernel notification methods).
If a timeout is specified, it is added to the event timeout list.
Events can register as timeout events without attaching to file
descriptors or signals.
Programs can set the
.Va tv
argument to
.Dv NULL
to specify an event has no timeout.
The behavior is undefined if
.Va ev
is
.Dv NULL .
The helper macros
.Fn evtimer_add
and
.Fn signal_add
are equivalent to
.Fn event_add .
.Pp
.Fn event_del
removes an event from an event loop.
To remove an event, pass a pointer to the event scheduled for removal as the
.Va ev
argument.
The behavior of the function is undefined if
.Va ev
is
.Dv NULL .
On success, it removes the event from internal event queues and unregisters it
with the kernel notification method.
The function fails if the library was not initialized with
.Xr event_init 3
or the event was not previously assigned to an
.Vt event_base
with
.Fn event_base_set .
The function does not free memory assigned to user-defined data structures,
nor does it close open file descriptors.
The helper macros
.Fn evtimer_del
and
.Fn signal_del
are equivalent to
.Fn event_del .
.Pp
.Fn event_base_once
is used to schedule a callback function to be executed exactly once without
requiring the caller to create and manage an
.Vt event
structure.
The arguments are as follows:
.Bl -tag -width "events:"
.It Va base :
A pointer to an
.Vt event_base
structure initialized by
.Xr event_base_new 3 .
The behavior is undefined if
.Va base
is
.Dv NULL .
.It Va fd :
A file descriptor to monitor.
.It Va events :
Flags matching
.Dv EV_TIMEOUT ,
.Dv EV_READ
or
.Dv EV_WRITE .
.It Va fn :
A user-defined callback function that is executed when the event triggers.
This callback matches the same prototype and design used in
.Fn event_set .
.It Va arg :
A user-defined data structure to pass to the callback function.
.It Va tv :
A pointer to an optional timeout
.Vt timeval
structure.
Set to
.Dv NULL
to ignore.
.El
.Pp
.Fn event_once
is equivalent to
.Fn event_base_once
but requires that the library is initialized with
.Xr event_init 3
and removes the argument
.Va base .
.Pp
To check the status of a scheduled event, refer to the
.Xr event_pending 3
manual page.
If a program needs to manually trigger an event, refer to
.Xr event_active 3 .
.Sh RETURN VALUES
.Fn event_base_set
returns 0 on success or returns \-1 if the event being reassigned has already
been processed by
.Fn event_add
or is not in an initialized state.
.Pp
.Fn event_add
returns 0 on success and \-1 on failure.
If a memory allocation fault occurs errno will be set; other errors will cause
the function to report the error via the log callback set with
.Xr event_set_log_callback 3
and then terminate the program with
.Xr exit 3 .
.Pp
.Fn event_del
returns 0 on success and \-1 on failure.
.Pp
.Fn event_base_once
and
.Fn event_once
return 0 if successful and \-1 on failure.
.Sh ERRORS
On failure
.Fn event_add
can set errno
as follows:
.Bl -tag -width Er
.It Bq Er ENOMEM
System has insufficient memory to add the event to the event loop.
.El
.Sh SEE ALSO
.Xr event_active 3 ,
.Xr event_base_loop 3 ,
.Xr event_base_new 3 ,
.Xr event_pending 3
.Sh HISTORY
This manual is for libevent-1.4, with local changes for
.Ox .
.Bl -bullet -width Ds
.It
.Fn event_set ,
.Fn event_add ,
and
.Fn event_del
were added in libevent-0.1 and appeared in
.Ox 3.2 .
.It
.Fn event_base_set
was introduced in libevent-1.0 and added to
.Ox 3.8 .
.It
.Fn event_once
was added to libevent-0.8 and appeared in
.Ox 3.8 .
.It
.Fn event_base_once
appeared first in libevent-1.3c and included in
.Ox 4.4 .
.It
The helper macros were added to libevent-0.6 and added to
.Ox 3.2 .
.El
.Sh AUTHORS
The event library
was written by
.An -nosplit
.An Niels Provos
and
.An Nick Mathewson .
.Pp
This manual page was written by
.An Ted Bullock Aq Mt tbullock@comlore.com .
