.\" $OpenBSD$
.\" Copyright (c) 2023 Ted Bullock <tbullock@comlore.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt EVENT_SET_LOG_CALLBACK 3
.Os
.Sh NAME
.Nm event_set_log_callback
.Nd set callback for diagnostics
.Sh SYNOPSIS
.Ft typedef void
.Fo (*event_log_cb)
.Fa "int sev"
.Fa "const char *msg"
.Fc
.Ft void
.Fo event_set_log_callback
.Fa "event_log_cb cb"
.Fc
.Sh DESCRIPTION
The event library reports errors and diagnostic messages through a callback
mechanism, that is configured using the
.Fn event_set_log_callback
function.
This function has a single argument, a function pointer,
.Ft event_log_cb ,
with a
.Ft void
return type and two parameters, an integer and a null-terminated ASCII string.
.Pp
The first parameter,
.Fa sev ,
represents the severity level of the warning or error being reported by the
event library.
The severity levels are divided into the following categories:
.Bl -tag -width Ds
.It Dv _EVENT_LOG_DEBUG 0
Messages for debugging purposes.
.It Dv _EVENT_LOG_MSG 1
Messages providing information.
.It Dv _EVENT_LOG_WARN 2
Messages indicating non-fatal issues.
.It Dv _EVENT_LOG_ERR 3
Messages indicating fatal issues.
After sending the message to the log callback, the library will stop the
program by calling
.Xr exit 3 .
.El
.Pp
The second parameter of the callback function,
.Fa msg ,
is a null-terminated ASCII string with a maximum length of 1024 bytes.
.Pp
The event library does not report diagnostics by default, and most functions
do not modify the
.Xr errno 2
value.
Additionally, in case of error conditions, the event library will always call
.Xr exit 3 ,
causing the program to end silently unless a callback is configured.
.Pp
When calling
.Fn event_set_log_callback ,
if
.Fa cb
is a null pointer the event library behavior is the same as if no callback was
provided at all.
.Sh RETURN VALUES
The function has no return value and is always successful.
.Sh EXAMPLES
The following C program illustrates the use of
.Fn event_set_log_callback .
The callback function
.Fn cb
includes logic to identify the four severity levels of diagnostic messages
the event library can generate.
.Bd -literal -offset indent
#include <stdio.h>
#include <event.h>

void
cb(int sev, const char *msg)
{
	switch (sev) {
	case _EVENT_LOG_DEBUG:
		printf("DEBUG: %s\en", sev, msg);
		break;
	case _EVENT_LOG_MSG:
		printf("INFO: %s\en", sev, msg);
		break;
	case _EVENT_LOG_WARN:
		printf("WARNING: %s\en", sev, msg);
		break;
	case _EVENT_LOG_ERR:
		printf("ERROR: %s\en", sev, msg);
	}
}

int
main(int argc, char *argv[])
{
	/* Redirect diagnostic messages to `cb` callback */
	event_set_log_callback(cb);
	/* No need to check return value, failures won't return */
	struct event_base *base = event_init();

	/*
	 * Do something with the event library here:
	 *  - Add events
	 *  - Call event_base_loop(3) or equivalent
	 */

	/* De-allocate memory */
	event_base_free(base);
	return 0;
}
.Ed
.Sh SEE ALSO
.Xr event_base_loop 3 ,
.Xr event_base_new 3 ,
.Xr exit 3
.Sh HISTORY
The
.Fn event_set_log_callback
function was first implemented in libevent-1.1 and added to
.Ox 3.8 .
.Sh AUTHORS
The event library
was written by
.An -nosplit
.An Niels Provos
and
.An Nick Mathewson .
.Pp
This manual was written by
.An Ted Bullock Aq Mt tbullock@comlore.com .
